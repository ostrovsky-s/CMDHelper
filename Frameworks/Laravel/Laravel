Use debug bur for query listen
--------------------------------------------------------- Main
php artisan about						       // About config info	
php artisan config:show database				       // Show particular config	
php artisan help make:controller                                       // Help to any command

php artisan --version                                                  // Laravel version

php artisan about						 	// Info about project config

php artisan list                                                       // Get all commands

php artisan help migrate                                               // Get help

php artisan up
php artisan down                                                       // Maintenance mode

php artisan serve                                                      // Start laravel local server 

php artisan key:generate                                               // Generate new key

php artisan dump-server                                                // Dump server

php artisan ide-helper:generate                                        // Update helper

php artisan stub:publish                                               // Customize stubs

php artisan vendor:publish --provider="ClassPath"                      // Publish configs to your application

php artisan storage:link

php artisan make:component Alert                                      // Component			
========================================================= Cache
php artisan optimize                                                   // Optimize cache configs
php artisan optimize:clear					       // Remove bootstrap cache	

php artisan config:cache                                               // Clear config cache
php artisan config:clear 

php artisan cache:clear                                                // App cache

php artisan view:cache                                                 // Compile views
php artisan view:clear

php artisan route:cache                                                // Add route cache
php artisan route:clear
========================================================= Blade Templates & assets
blade.php   - require
saas - css compiler

@yield('content');                                                     // This is fetch value
@section('sidebar'); 
@include();

@csrf

$errors in any template exist

{{ route(booking.create)}}  // output var, route is a global helper function!

https://momentjs.com/
https://www.layoutit.com/

for compiling assets use mix minify js css 
and chose different compillers like (less react ..)

npm install jquery                                                       // Add jQuery
npm install jquery-ui --save-dev	

							                 // Add in bootstrap.js 
window.$ = window.jQuery = require('jquery');
window.$ = require('jquery-ui');

console.log(jQuery().jquery);	

The --save-dev option save only for dev pack

npm run dev                                                              // Create compiling files
npm run watch                                                            // Webpack will automatically recompile your assets when it detects a change

npm run production                                                       // To build all css js and minify them

npm ls --depth=0
========================================================= Models
php artisan make:model                                                   // Create new model with prompt
php artisan make:model Ticket                                            // Use params   -mr   m - add migration, r - add resource controller

php artisan make:model --factory Ticket  

php artisan make:factory ClassFactory
$table = 'to assign table name';
========================================================= Route
php artisan route:list

php artisan route:list --except-vendor                                 
php artisan route:list --path tasks                                      // Filter by path

Route::resources([
    'photos' => PhotoController::class,
    'posts' => PostController::class,
]);

Route::get('/test', [ArticleController::class, 'show']);
========================================================= Controller
// Each Controller relate to one table 

php artisan make:controller ArticleController                             // Empty class

php artisan make:controller Api/PhotoController --api                     // Api controller 5 methods

php artisan make:controller ArticleController --resource                  // Typical CRUD 7 methods

php artisan make:controller ArticleController --invokable                 // With single action 

php artisan make:controller TaskController --plain                        // Empty controller
========================================================= Command
php artisan make:command UploadToBucket
========================================================= Provider
php artisan make:provider EnvatoCustomServiceProvider
========================================================= Request
// Classes for validate : ValidatesRequests, AuthorizesRequest

Route->name('contact-form');                                              // Named-follow route

Request::all();                                                           // All request info

$request->all()->dd();

$request->validate()                                                      // Method for data validating

php artisan make:request Analytics/StoreAnalyticsRequest                  // Add request to dir
========================================================= Resource
php artisan make:resource AnalyticResource 
========================================================= Exceptions
php artisan make:exception MyCustomException --render
========================================================= AUTH   
	                                                     // Create user authentication
========================================================= Policy (What user can do!)
php artisan make:policy SitePolicy --model:Category
========================================================= Scope

========================================================= Observer
php artisan make:observer TaskObserver -m Task
========================================================= Collections
chunk(index) use in db query,
first(); 
shufle();
========================================================= Middlewhare
php artisan make:middlewhare Loggin
php artisan make:middleware EnsureTokenIsValid

to define new MiddleWhere in class Kernel.php
php artisan make:middleware ForceJsonResponse
========================================================= Eloquent ORM
booking->fill(request->input());
booking->save();
------------------------------------------------- One-to-one
hasOne() ->    <-belongsTo(), FK    User <-> Phone

class Mechanic $this->hasOneThrough(Owner::class, Car::class);

Owner::class - final model to retrive

------------------------------------------------- One-to-many
hasMany()->	<-belongsTo()       Blog <-> Comments

------------------------------------------------- Many-to-many
belongsToMany()-> <-belongsToMany()   User <-> Roles

$role->pivot->created_at                                                   // Access intermediate table
------------------------------------------------- Polymorphic
Doesn't have db relation foreign keys
class Photo morphTo()->  <-morphToMany('App\Photo', imageable) Class Post  // Photos <-> [Posts, Products, Users]

$user->articles()->detach();
$user->articles()->save($article);                                         // Save into 2 tables articles and relations

$user->articles()->attach(11);                                             // Add relation in intermediate table
---------------------------------------------Soft-deleting 
Is deleting a record from but not from database!

use SoftDeletes;                                                           // Add in model

Booking::withTrashed();                                                    // Recover
========================================================= Migrations
php artisan tinker

php artisan migrate                                                        // Run all migrations

php artisan migrate --database=dbName                                      // Specific database

php artisan migrate --path=/database/migrations/my_migration.php           // Specific migration

php artisan migrate:reset                                                  // Rollback all migration

php artisan migrate:refresh                                                // Rollback and start all

php artisan migrate:fresh --seed                                           // Drop all and start all

php artisan migrate:rollback --step=1                                      // 1 migration back down

php artisan migrate --pretend					           // Preview SQL DDL		

php artisan schema:dump                                                    // Squash migration to one file

php artisan schema:dump --prune                                            // Dump & remove all migrations
 
php artisan make:migration create_phones_table                             // Create own migration

php artisan make:migration create_regions_stores_table			   // Pivot table

add->comments()                                                            // To each row to explain what does it mean

php artisan make:migration add_date_of_birth_to_users_table     	   // Append new column   
========================================================= MAIL
if SMTP doesnt not configured u can change driver to [log] in env
	
mailtrap.io                                                                // Use for dev mail testing 
========================================================= Database Seeding
php artisan make:seeder UserSeeder

php artisan db:seed                                                        // Run all seeds

php artisan db:seed --database=name --class=UsersTableSeeder               // Run all seeds to db

php artisan db:seed TranslationsTableSeeder
========================================================= Artisan tinker (Listen every query)
DB::listen(function($query) { var_dump($query->sql, $query->bindings); });
========================================================= Composer
composer dump-autoload                                                     // Recover list classes autoload_classmap.php
========================================================= ENV
App::environment()                                                         // Get environment
php artisan env:encrypt
php artisan env:decrypt
========================================================= Queue
Bus[chain], Batch[parallel], Race Condition, http://supervisord.org/

php artisan queue:table                                                    // Generate table for jobs

php artisan make:job GenerateReport                                        // Create new job	

php artisan queue:work --once                                              // Start worker once
php artisan queue:work                                                     // Start worker
php artisan queue:listen                                                   // Ensures that a new instance of the app is created for every job, no need to restart
php artisan queue:restart                                                  // Restart when new code
php artisan queue:failed                                                   // Get filed jobs
php artisan queue:flush                                                    // Delete all failed jobs


queue:work will take a snapshot of your jobs at the moment you first run it. 
Changes in the code will not be considered until you stop and restart queue:work . 

On the other hand, 
queue:listen will take code changes into account after you first run it.

$report->dispatch()->delay(1)                                              // Sending job to the queue with worker delay 1 second
public $timeout = 1	                                                   // Terminate if 1 sec done
public $tries = 3                                                          // To consider failed
========================================================= Scheduler
php artisan schedule:list
php artisan schedule:run
========================================================= Tests
php artisan make:test UserTest
php artisan make:test UserTest --unit
php artisan test --parallel
php artisan test --filter ClassNameTest
========================================================= Logs
tail -n 100 storage/logs/laravel.log | grep 'homepage'                     // Last 100 rows with contains word
========================================================= Sentry
php artisan sentry:test
========================================================= Sail
./vendor/bin/sail                                                          // List of sail commands

alias sail='sh $([ -f sail ] && echo sail || echo vendor/bin/sail)'

sail ps                                                       // Display the status of all containers
sail up
php artisan sail:add
========================================================= Horizon
php artisan horizon                                   	      // Start horizon


php artisan horizon:pause 
php artisan horizon:continue
php artisan horizon:terminate
php artisan horizon:clear
php artisan horizon:clear --queue=emails
php artisan horizon:forget 9e83bb19-933a-436c-8838-94f193aecdef
---------------------------------------------- Supervisorctl
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl start horizon
========================================================= Dumps & Debug
logs()->critical('$data',[$data]);
Http::dd()->get('http://example.com');

DB::table('users')->where('votes', '>', 100)->dd();
 
DB::table('users')->where('votes', '>', 100)->dump();

The dumpRawSql and ddRawSql methods may be invoked on a query to dump the query's SQL with all parameter bindings properly substituted:

DB::table('users')->where('votes', '>', 100)->dumpRawSql();
 
DB::table('users')->where('votes', '>', 100)->ddRawSql();
